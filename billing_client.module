<?php
/**
 * @file
 * Billing client module.
 *
 */

/**
 * Implements hook_permission().
 */
function billing_client_permission() {
  // Add permission to admin pgapi.
  return array(
    'billing access' => array(
      'title' => t('Access to billing'),
      'description' => t('User has access to order products'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function billing_client_menu() {
  $items = array();

  $items['billing'] = array(
    'title' => 'Billing',
    'page callback' => 'billing_client_goto',
    'access arguments' => array('billing access'),
    'menu_name' => 'user-menu',
  );
  
  $items['admin/config/system/billing_client'] = array(
    'title' => 'Billing Client settings',
    'description' => 'Configure Billing API integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('billing_client_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'billing_client.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/system/billing_client/settings'] = array(
    'title' => 'Billing Client settings',
    'description' => 'Configure Billing API integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('billing_client_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'billing_client.admin.inc',

    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/system/billing_client/users'] = array(
    'title' => 'Billing Client Users',
    'description' => 'Synchronize selected users.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('billing_client_users'),
    'access arguments' => array('administer site configuration'),
    'file' => 'billing_client.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


/**
 * Menu call back to redirect to billing.
 */
function billing_client_goto() {
  global $user;
  
  $website = variable_get('billing_client_website_url', FALSE);
  
  if($website) {
    return t('Billing is not available temporary. Please contact support.');
  }
 
  $access_token = db_select('billing_client_tokens', 'bct')
    ->fields('bct')
    ->condition('uid', $user->uid)
    ->execute()
    ->fetchObject();
 
  if(!$access_token or $access_token->expire > time()) {
    // No access token or already expired.
    $session_token = billing_client_get('user/:name', 
    array(
      ':name' => $user->name,
    ));
    if(is_array($session_token)) {
      billing_client_store_token($user->uid, $session_token['access_token'], $session_token['expire']);
      
      drupal_goto($website . '/billing/login/' . $session_token['access_token']);
    }
    return t('Billing is not available temporary. Please contact support.');
  }
  
  drupal_goto($website . '/billing/login/' . $access_token->access_token);
  
}

/**
 * Implements hook_user_login().
 */
function billing_client_user_login(&$edit, $account) {
  $session_token = billing_client_get('user/:name', 
    array(
      ':name' => $account->name,
    ));
  if(is_array($session_token)) {
    billing_client_store_token($account->uid, $session_token['access_token'], $session_token['expire']);
  }
  
  
}

function billing_client_store_token($uid, $token, $expire) {
  $access_token = db_select('billing_client_tokens', 'bct')
    ->fields('bct')
    ->condition('access_token', $token)
    ->execute()
    ->fetchObject();
    
  if(!$access_token){
    // generate new token.
    db_insert('billing_client_tokens')
      ->fields(array(
        'uid' => $uid,
        'expire' => $expire,
        'access_token' => $token,
      ))
      ->execute();
  }
  else{
      db_update('billing_client_tokens')
      ->fields(
          array(
            'expire' => $expire,
            'access_token' => $token,
          )
      )
      ->condition('uid', $uid)
      ->execute(); 
  }
}



/**
 * Implements hook_user_insert().
 */
function billing_client_user_insert(&$edit, $account, $category) {
  $request['name'] = $account->name;
  $request['email'] = $account->mail;
  $request['status'] = $account->status;
  billing_client_post('user', $request);
}

/**
 * Implements hook_user_update().
 */
function billing_client_user_update(&$edit, $account, $category) {
  $request[':name'] = $account->original->name;
  $request['name'] = $account->name;
  $request['email'] = $account->mail;
  $request['status'] = $account->status;
  billing_client_put('user/:name', $request);

}

/**
 * Implements hook_user_delete().
 */
function billing_client_user_delete($account) {
  $request[':name'] = $account->name;
  billing_client_delete('user/:name', $request);
}


/**
 * Send GET request.
 */
function billing_client_get($url, $params = array()) {

  billing_client_prepareCommand($url, $params);
  $options = array(
    'method' => 'GET',
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => '*/*',
      'User-Agent' => 'Billing Client module for Drupal',
      'Token' => variable_get('billing_client_token'),
    )
  );
  $url = variable_get('billing_client_api_url') . '/' . $url;
  $answer = drupal_http_request($url, $options);
  if($answer->code == '200'){
    if(!empty($answer->data)){
      return json_decode($answer->data, TRUE);
    }
    return $answer->status_message;
  }
  else{
    if(isset($answer->error)){
      return $answer->error;
    }
    return FALSE;
  }
}

/**
 * Send DELETE request.
 */
function billing_client_delete($url, $params = array()) {

  billing_client_prepareCommand($url, $params);
  $options = array(
    'method' => 'DELETE',
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => '*/*',
      'User-Agent' => 'Billing Client module for Drupal',
      'Token' => variable_get('billing_client_token'),
    )
  );
  $url = variable_get('billing_client_api_url') . '/' . $url;
  $answer = drupal_http_request($url, $options);
  if($answer->code == '200'){
    if(!empty($answer->data)){
      return json_decode($answer->data, TRUE);
    }
    return $answer->status_message;
  }
  else{
    if(isset($answer->error)){
      return $answer->error;
    }
    return FALSE;
  }
}

/**
 * Send POST request.
 */
function billing_client_post($url, $params = array()) {

  billing_client_prepareCommand($url, $params);
  $options = array(
    'method' => 'POST',
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => '*/*',
      'User-Agent' => 'Billing Client module for Drupal',
      'Token' => variable_get('billing_client_token'),
    ),
    'data' => json_encode($params),
  );
  $url = variable_get('billing_client_api_url') . '/' . $url;
  $answer = drupal_http_request($url, $options);
  if($answer->code == '200'){
    if(!empty($answer->data)){
      return json_decode($answer->data, TRUE);
    }
    return $answer->status_message;
  }
  else{
    if(isset($answer->error)){
      return $answer->error;
    }
    return FALSE;
  }
}

/**
 * Send PUT request.
 */
function billing_client_put($url, $params = array()) {

  billing_client_prepareCommand($url, $params);
  $options = array(
    'method' => 'PUT',
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => '*/*',
      'User-Agent' => 'Billing Client module for Drupal',
      'Token' => variable_get('billing_client_token'),
    ),
    'data' => json_encode($params),
  );
  $url = variable_get('billing_client_api_url') . '/' . $url;
  $answer = drupal_http_request($url, $options);
  if($answer->code == '200'){
    if(!empty($answer->data)){
      return json_decode($answer->data, TRUE);
    }
    return $answer->status_message;
  }
  else{
    if(isset($answer->error)){
      return $answer->error;
    }
    return FALSE;
  }
}

/**
 * Replace all :name in $url with data from $params.
 */
function billing_client_prepareCommand(&$command, &$params) {
  foreach($params as $key => $val){
    if($key[0] == ':'){
      $command = str_replace($key, $val, $command);
      unset($params[$key]);
    }
  }
}
