<?php
/**
 * @file
 * Billing client module.
 *
 */

/**
 * Implements hook_menu().
 */
function billing_client_menu() {
  $items = array();

  $items['admin/config/billing_client'] = array(
    'title' => 'Create site',
    'description' => 'Settings for create site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('billing_client_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}


/**
 * Paths to the files.
 */
function billing_client_settings($form, &$form_state) {
  if(variable_get('billing_client_token')){
    $answer = billing_client_get('ping');
    if(isset($answer['message'])){
      drupal_set_message(t('API is online'));
    }
    else{
      drupal_set_message(t('API is offline'), 'error');
    }
  }
  $form['billing_client_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Token'),
    '#default_value' => variable_get('billing_client_token'),
  );

  $form['billing_client_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Billing API url'),
    '#default_value' => variable_get('billing_client_api_url'),
  );


  return system_settings_form($form);
}


/**
 * Implements hook_user_insert().
 */
function billing_client_user_insert(&$edit, $account, $category) {
  $request['name'] = $account->name;
  $request['email'] = $account->mail;
  $request['pass'] = $account->status;
  billing_client_post('user', $request);
}

/**
 * Implements hook_user_update().
 */
function billing_client_user_update(&$edit, $account, $category) {
//  billing_client_call_service('user_sync', $account);
}

/**
 * Implements hook_user_delete().
 */
function billing_client_user_delete($account) {
//  billing_client_call_service('user_sync', $account);
}


/**
 * Client gateways .
 */
function billing_client_get($url, $params = array()) {
  
  billing_client_prepareCommand($url, $params);
  $options = array(
    'method' => 'GET',
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => '*/*',
      'User-Agent' => 'Billing Client module for Drupal',
      'Token' => variable_get('billing_client_token'),
    )
  );
  $url = variable_get('billing_client_api_url') . '/' . $url;
  $answer = drupal_http_request($url, $options);
  if($answer->code == '200'){
    if(!empty($answer->data)){
      return json_decode($answer->data, TRUE);
    }
    return $answer->status_message;
  }
  else{
    if(isset($answer->error)){
      return $answer->error;
    }
    return FALSE;
  }
}

function billing_client_post($url, $params = array()) {
  
  billing_client_prepareCommand($url, $params);
  $options = array(
    'method' => 'POST',
    'headers' => array(
      'Content-Type' => 'application/json',
      'Accept' => '*/*',
      'User-Agent' => 'Billing Client module for Drupal',
      'Token' => variable_get('billing_client_token'),
    ),
    'data' => json_encode($params),
  );
  $url = variable_get('billing_client_api_url') . '/' . $url;
  $answer = drupal_http_request($url, $options);
  if($answer->code == '200'){
    if(!empty($answer->data)){
      return json_decode($answer->data, TRUE);
    }
    return $answer->status_message;
  }
  else{
    if(isset($answer->error)){
      return $answer->error;
    }
    return FALSE;
  }
}


function billing_client_prepareCommand(&$command, &$params) {
  foreach($params as $key => $val){
    if($key[0] == ':'){
      $command = str_replace($key, $val, $command);
      unset($params[$key]);
    }
  }
}
